#!/usr/bin/env bash
#
# bootstrap installs things.

# Make sure .sh files are executable.
find . -type f -iname "*" -exec chmod +x {} \;

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    # Try to get existing git config values
    git_authorname=$(git config --get user.name 2>/dev/null || echo "")
    git_authoremail=$(git config --get user.email 2>/dev/null || echo "")
    git_signingkey=$(git config --get user.signingkey 2>/dev/null || echo "")

    # Prompt for author name if not already set
    if [ -z "$git_authorname" ]; then
      user ' - What is your github author name?'
      read -e -i "pauldambra" git_authorname
    else
      info "Using existing git author name: $git_authorname"
    fi

    # Prompt for author email if not already set
    if [ -z "$git_authoremail" ]; then
      user ' - What is your github author email?'
      read -e -i "paul.dambra@gmail.com" git_authoremail
    else
      info "Using existing git author email: $git_authoremail"
    fi

    # Prompt for signing key if not already set
    if [ -z "$git_signingkey" ]; then
      user ' - What is your git signing key? (leave empty to skip)'
      read -e git_signingkey
    else
      info "Using existing git signing key"
    fi

    if [ -z "$git_signingkey" ]; then
      # Remove signing key lines if not provided
      sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" -e "/signingkey/d" git/gitconfig.local.symlink.template > git/gitconfig.local.symlink
    else
      sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" -e "s|SIGNINGKEY|$git_signingkey|g" git/gitconfig.local.symlink.template > git/gitconfig.local.symlink
    fi

    success 'gitconfig'
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

setup_gitconfig
install_dotfiles

# Run all install scripts
info 'running install scripts'
for installer in $(find "$DOTFILES_ROOT" -maxdepth 2 -name 'install' -not -path '*.git*' -type f); do
  if [ -x "$installer" ]; then
    info "running $(basename $(dirname "$installer"))/install"
    if sh -c "$installer"; then
      success "$(basename $(dirname "$installer"))/install completed"
    else
      fail "$(basename $(dirname "$installer"))/install failed"
    fi
  fi
done

# Copy configuration files to home directory
info 'copying configuration files'
if [ -f "$DOTFILES_ROOT/.markdownlint.json" ]; then
  cp "$DOTFILES_ROOT/.markdownlint.json" "$HOME/.markdownlint.json"
  success 'copied .markdownlint.json to home directory'
fi

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if source bin/dot | while read -r data; do info "$data"; done
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
echo ''
echo '  To apply changes to your current shell, run:'
echo '    source ~/.zshrc'
echo ''
echo '  Or open a new terminal window.'
